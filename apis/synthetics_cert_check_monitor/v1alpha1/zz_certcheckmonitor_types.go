/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type CertCheckMonitorObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type CertCheckMonitorParameters struct {

	// ID of the newrelic account
	// +kubebuilder:validation:Optional
	AccountID *float64 `json:"accountId,omitempty" tf:"account_id,omitempty"`

	// +kubebuilder:validation:Required
	CertificateExpiration *float64 `json:"certificateExpiration" tf:"certificate_expiration,omitempty"`

	// +kubebuilder:validation:Required
	Domain *string `json:"domain" tf:"domain,omitempty"`

	// The locations in which this monitor should be run.
	// +kubebuilder:validation:Optional
	LocationsPrivate []*string `json:"locationsPrivate,omitempty" tf:"locations_private,omitempty"`

	// The locations in which this monitor should be run.
	// +kubebuilder:validation:Optional
	LocationsPublic []*string `json:"locationsPublic,omitempty" tf:"locations_public,omitempty"`

	// The interval at which this monitor should run. Valid values are EVERY_MINUTE, EVERY_5_MINUTES, EVERY_10_MINUTES, EVERY_15_MINUTES, EVERY_30_MINUTES, EVERY_HOUR, EVERY_6_HOURS, EVERY_12_HOURS, or EVERY_DAY.
	// +kubebuilder:validation:Required
	Period *string `json:"period" tf:"period,omitempty"`

	// The monitor status (i.e. ENABLED, MUTED, DISABLED).
	// +kubebuilder:validation:Required
	Status *string `json:"status" tf:"status,omitempty"`

	// The tags that will be associated with the monitor
	// +kubebuilder:validation:Optional
	Tag []TagParameters `json:"tag,omitempty" tf:"tag,omitempty"`
}

type TagObservation struct {
}

type TagParameters struct {

	// Name of the tag key
	// +kubebuilder:validation:Required
	Key *string `json:"key" tf:"key,omitempty"`

	// Values associated with the tag key
	// +kubebuilder:validation:Required
	Values []*string `json:"values" tf:"values,omitempty"`
}

// CertCheckMonitorSpec defines the desired state of CertCheckMonitor
type CertCheckMonitorSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     CertCheckMonitorParameters `json:"forProvider"`
}

// CertCheckMonitorStatus defines the observed state of CertCheckMonitor.
type CertCheckMonitorStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        CertCheckMonitorObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// CertCheckMonitor is the Schema for the CertCheckMonitors API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,newrelic}
type CertCheckMonitor struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              CertCheckMonitorSpec   `json:"spec"`
	Status            CertCheckMonitorStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// CertCheckMonitorList contains a list of CertCheckMonitors
type CertCheckMonitorList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []CertCheckMonitor `json:"items"`
}

// Repository type metadata.
var (
	CertCheckMonitor_Kind             = "CertCheckMonitor"
	CertCheckMonitor_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: CertCheckMonitor_Kind}.String()
	CertCheckMonitor_KindAPIVersion   = CertCheckMonitor_Kind + "." + CRDGroupVersion.String()
	CertCheckMonitor_GroupVersionKind = CRDGroupVersion.WithKind(CertCheckMonitor_Kind)
)

func init() {
	SchemeBuilder.Register(&CertCheckMonitor{}, &CertCheckMonitorList{})
}
